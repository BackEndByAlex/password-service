# .github/workflows/deploy.yml
name: Password Service - Build, Test & Deploy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ─────────────────────────────────────────────────────────────
  # 1) Build stage
  # ─────────────────────────────────────────────────────────────
  build:
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64

  # ─────────────────────────────────────────────────────────────
  # 2) Test stage - Unit tests
  # ─────────────────────────────────────────────────────────────
  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit

  # ─────────────────────────────────────────────────────────────
  # 3) Test stage - Lint
  # ─────────────────────────────────────────────────────────────
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

  # ─────────────────────────────────────────────────────────────
  # 4) Deploy to production (only on main branch)
  # ─────────────────────────────────────────────────────────────
  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: self-hosted
    needs: [build, unit-test, lint]
    environment:
      name: production
      url: https://password.timelock.se
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create environment files
        run: |
          echo "${{ secrets.DOTENV_FILE }}" > .env
          echo "${{ secrets.PUBLIC_PEM }}" > public.pem

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: |
          echo "Pulling latest password service image..."
          docker-compose -f docker-compose.yaml pull

      - name: Deploy Password Service with Docker Compose
        run: |
          echo "Deploying password service to production..."
          docker-compose -f docker-compose.yaml down --remove-orphans
          docker-compose -f docker-compose.yaml up -d
          
      - name: Cleanup old images
        run: |
          docker image prune -af --filter "until=24h"